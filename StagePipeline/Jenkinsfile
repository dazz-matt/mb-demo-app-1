pipeline {
    agent any
    tools {
        maven "maven3"
        jdk "openjdk8"
    }

    environment {
        SNAP_REPO = 'mb-snapshot'
        NEXUS_USER = 'admin'
        NEXUS_PASS = 'Dazz123'
        RELEASE_REPO = 'mb-release'
        CENTRAL_REPO = 'mb-maven-central'
        NEXUSIP = '172.31.11.68' //private ip since in the same network
        NEXUSPORT = '8081'
        NEXUS_GRP_REPO = 'mb-maven-group'
        NEXUS_LOGIN = 'nexuslogin'
        SONARSERVER = 'sonarserver'
        SONARSCANNER = 'sonarscanner'
        registryCredential = 'ecr:us-west-2:awscreds'
        appRegistry = '701944754406.dkr.ecr.us-west-2.amazonaws.com/mbdemoappimg'
        mbRegistry = 'https://701944754406.dkr.ecr.us-west-2.amazonaws.com'
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn -s settings.xml -DskipTests install'
            }
            post {
                success {
                    echo "Now archiving"
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Test') {
            steps {
                sh 'mvn -s settings.xml test'
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            }
        }
        
        stage('Sonar Analysis') {
            environment {
                scannerHome = tool "${SONARSCANNER}"
            }
            steps {
               withSonarQubeEnv("${SONARSERVER}") {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }

        stage('Quality Gate') {
            steps { 
                timeout(time: 1, unit: 'HOURS') {
                // Parameter indicates whether to set pipeline to unstable
                // true = set pipeline to unstable, false = don't
                waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Nexus Repo Artifact Upload') {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
                    groupId: 'QA',
                    version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                    repository: "${RELEASE_REPO}",
                    credentialsId: "${NEXUS_LOGIN}",
                    artifacts: [
                        [artifactId: 'mb-app',
                        classifier: '',
                        file: 'target/vprofile-v2.war',
                        type: 'war']
                    ]
                )
            }
        }

        stage('Build App Image') {
            steps {
                script {
                    dockerImage = docker.build(appRegistry +  ' :$BUILD_NUMBER', './Docker-files/app/multistage/')
                }
            }
        }

        stage('Upload App Image') {
            steps {
                script {
                    docker.withRegistry(mbRegistry, registryCredential) {
                        dockerImage.push('$BUILD_NUMBER')
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }
}
